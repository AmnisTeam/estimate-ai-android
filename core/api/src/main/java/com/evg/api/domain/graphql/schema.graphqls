scalar Long

schema {
  query: Query
  mutation: Mutation
  subscription: Subscription
}

type Query {
  getTestsResponse(page: Int!): GetTestsResponse!
  getTestDataResponse(id: Int!): GetTestDataResponse!
  getTestStatisticsResponse: GetTestStatisticsResponse!
}

type Mutation {
  registerUserResponse(data: UserDTO!): CodeResponse!
  loginUserResponse(data: UserDTO!): UserLoginResponse!
  passwordResetResponse(data: PasswordResetDTO!): CodeResponse!
  createEssayTestResponse(data: CreateEssayTestDTO!): CreateEssayTestResponse!
}

type Subscription {
  onTestProgressResponse: OnTestProgressResponse!
}

input UserDTO {
  email: String!
  password: String!
}
type CodeResponse {
  code: Int!
}
type UserLoginResponse {
  token: String!
  code: Int!
}

input PasswordResetDTO {
  email: String!
}

input CreateEssayTestDTO {
  essay: String!
}
type CreateEssayTestResponse {
  code: Int!
}

union TestResult = ReadyTest | LoadingTest | ErrorTest
type GetTestsResponse {
  code: Int!
  count: Int!
  pages: Int!
  next: Int
  prev: Int
  tests: [TestResult!]!
}

type OnTestProgressResponse {
  code: Int!
  tests: [TestResult!]!
}
type ReadyTest {
  id: Int!
  title: String!
  type: String!
  description: String!
  score: Int!
  createdAt: Long!
}
type LoadingTest {
  id: Int!
  type: String!
  queue: Int!
  progress: Int!
  createdAt: Long!
}
type ErrorTest {
  id: Int!
  type: String!
  createdAt: Long!
}

union TestData = EssayTest
type GetTestDataResponse {
  code: Int!
  testData: TestData!
}
type EssayTest {
  id: Int!
  essay: String!
}

type GetTestStatisticsResponse {
  code: Int!
  testStatistics: [ReadyTest!]!
}